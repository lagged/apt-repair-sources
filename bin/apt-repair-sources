#!/usr/bin/env ruby
#
# Author:    Till Klampaeckel
# License:   New BSD License, http://www.opensource.org/licenses/bsd-license.php
# Setup:     gem install trollop
# Copyright: 2011 Till Klampaeckel
#

require 'rubygems'
require 'trollop'
require 'net/http'

$: << File.join(File.dirname(__FILE__), "..", "lib")
require 'apt/repair/sources'

ubuntu = `lsb_release -i|awk '{print $3}'`.gsub(/\s+/, "")
if (ubuntu != 'Ubuntu') 
  puts "Ubuntu-only, currently."
  exit 1
end

work = []

if File.exist?("/etc/apt/sources.list") 
  work.push("/etc/apt/sources.list")
end

if File.directory?("/etc/apt/sources.list.d")
  work += Dir["/etc/apt/sources.list.d/*.list"]
end

if work.length == 0
  puts "Nothing to be done."
  exit
end

opts = Trollop::options do
  version "apt-repair-sources 0.1.0 (c) 2011 Till Klampaeckel"
  banner <<-EOS
This tool helps you clean out bad entries from apt's sources.

Usage:

    sudo apt-repair-sources --dry-run|--fix-it-for-me
EOS
  opt :dry_run, "Display bad entries, this is enabled by default (no changes)", :default => false
  opt :fix_it_for_me, "Remove bad entries from the sources (changes will be made)", :default => false
end

if opts[:dry_run] == true && opts[:fix_it_for_me] == true
  puts "Cannot have both."
  exit 1
else
  if opts[:fix_it_for_me_given] && opts[:fix_it_for_me] == true
    dry_run = false
  else
    dry_run = true
  end
end

p = Apt::Repair::Sources::find_platform

work.each do |f| 
  File.open(f, "r") do |infile|
    keep = []
    err  = 0
    while (l = infile.gets) 

      if l.nil? || l.empty? 
        next
      end

      unless l[0,3] == 'deb' || l[0,7] == 'deb-src'
        next
      end

      helper = Apt::Repair::Sources.new(l)
      url    = helper.get_url(nil)
      el     = helper.get_el

      has_error = false

      el.each do |t|

        break if has_error == true

        uri  = url + t
        uri += helper.get_end

        if helper.uri_exists(uri) == true
          next
        end

        has_error = true

        err += 1

        if dry_run == true
          puts "#{f}: #{uri}"
        end

      end

      if has_error == true
        keep.push(helper.fix_line)
      else
        keep.push(l)
      end

    end

    # save to be safe
    if dry_run == false && err > 0
      File.open(f, 'w') do |f|
        f.write(keep.join("\n"))
      end
    end

    if err == 0 && dry_run == true
      puts "There are no errors in #{f}"
    end

  end
end
